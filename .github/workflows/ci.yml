name: CI - Build & Test

on:
  pull_request:
    branches:
      - main
  push:
    branches-ignore:
      - main

env:
  DOCKER_IMAGE_BACKEND: counter-backend
  DOCKER_IMAGE_FRONTEND: counter-frontend

jobs:
  # 🧩 Job 1: Build & Test Backend
  test-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE_BACKEND }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start PostgreSQL for testing
        run: |
          docker run -d \
            --name test-postgres \
            -e POSTGRES_USER=counteruser \
            -e POSTGRES_PASSWORD=counterpass \
            -e POSTGRES_DB=counterdb \
            -p 5432:5432 \
            postgres:15-alpine

          echo "Waiting for PostgreSQL to be ready..."
          timeout 30 bash -c 'until docker exec test-postgres pg_isready -U counteruser; do sleep 1; done'

      - name: Run Backend container
        run: |
          docker run -d \
            --name test-backend \
            --network host \
            -e POSTGRES_HOST=localhost \
            -e POSTGRES_PORT=5432 \
            -e POSTGRES_USER=counteruser \
            -e POSTGRES_PASSWORD=counterpass \
            -e POSTGRES_DB=counterdb \
            -e PORT=5000 \
            ${{ env.DOCKER_IMAGE_BACKEND }}:test

          echo "Waiting for backend to start..."
          sleep 10

      - name: Verify Backend health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/counter || echo "000")
          echo "Backend response code: $response"
          if [ "$response" == "200" ]; then
            echo "✅ Backend API is responding"
          else
            echo "⚠️ Backend response: $response"
            docker logs test-backend
            exit 1
          fi

      - name: Show Backend logs
        if: always()
        run: docker logs test-backend

      - name: Cleanup
        if: always()
        run: |
          docker stop test-backend test-postgres || true
          docker rm test-backend test-postgres || true

  # 🧩 Job 2: Build & Test Frontend
  test-frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          CI=false npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE_FRONTEND }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Frontend container
        run: |
          docker run -d \
            --name test-frontend \
            -p 8080:80 \
            ${{ env.DOCKER_IMAGE_FRONTEND }}:test
          sleep 5

      - name: Verify Frontend health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 || echo "000")
          echo "Frontend response code: $response"
          if [ "$response" == "200" ]; then
            echo "✅ Frontend is responding"
          else
            echo "⚠️ Frontend response: $response"
            docker logs test-frontend
            exit 1
          fi

      - name: Show Frontend logs
        if: always()
        run: docker logs test-frontend

      - name: Cleanup
        if: always()
        run: |
          docker stop test-frontend || true
          docker rm test-frontend || true

  # 🧩 Job 3: Integration Test with Docker Compose
  integration-test:
    name: Integration Test (Docker Compose)
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start full stack with Docker Compose
        run: |
          docker compose up -d
          echo "Waiting for services to start..."
          sleep 20

      - name: Check service status
        run: |
          echo "=== Docker Compose Services ==="
          docker compose ps

          echo -e "\n=== PostgreSQL Status ==="
          docker exec $(docker ps -qf "name=postgres") pg_isready -U counteruser || echo "Database not ready"

          echo -e "\n=== Backend Status ==="
          curl -s -o /dev/null -w "Backend HTTP Status: %{http_code}\n" http://localhost:5000/api/counter || echo "Backend check failed"

          echo -e "\n=== Frontend Status ==="
          curl -s -o /dev/null -w "Frontend HTTP Status: %{http_code}\n" http://localhost:8080 || echo "Frontend check failed"

      - name: Show Docker Compose logs
        if: always()
        run: docker compose logs

      - name: Cleanup
        if: always()
        run: docker compose down -v

  # 🧩 Job 4: CI Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test]
    if: always()

    steps:
      - name: Generate CI summary
        run: |
          echo "## 🔍 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Build & Test: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Build & Test: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Test: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test-backend.result }}" == "success" ]] && \
             [[ "${{ needs.test-frontend.result }}" == "success" ]] && \
             [[ "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "✅ **All checks passed! Ready to merge.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed. Please review the errors above.**" >> $GITHUB_STEP_SUMMARY
          fi
